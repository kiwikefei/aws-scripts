(()=>{"use strict";var e={570:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Certificate=void 0;const r=s(0),i=s(677);class c extends r.Stack{constructor(e,t,s,r,c){super(e,t,s),this.certificate=new i.Certificate(this,r.getResourceID("Certificate"),{domainName:`*.${c.zoneName}`,subjectAlternativeNames:[],validation:{props:{hostedZone:c},method:i.ValidationMethod.DNS}})}}t.Certificate=c},892:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Stage=t.StackConfig=void 0;class s{constructor(e,t,s){this.getId=()=>this.id,this.getSlug=()=>this.getProperty("slug"),this.getAccountId=()=>this.getProperty("account_id"),this.getRegion=()=>this.getProperty("region"),this.getStackName=()=>this.stack.name,this.getStageName=()=>this.stage.getStageName(),this.getProperty=(e,t=void 0)=>{const s=this.stack?.[e]||this.stage.getProperty(e)||t;if(s)return s;throw new Error(`Missing value ${e} for stack`)},this.getEnvironment=()=>({account:this.getAccountId(),region:this.getRegion()}),this.getStackProps=()=>({env:this.getEnvironment()}),this.getFullResourceId=e=>`${this.getBaseResourceId()}-${e}`,this.getStackExportId=e=>`${this.getSlug()}-${this.getStageName()}-${e}`,this.getBaseResourceId=()=>`${this.getSlug()}-${this.getStageName()}-${this.getStackName()}`,this.getSecretArn=(e,t)=>`${this.getSecretBaseArn()}/${e}:${t}::`,this.getSecretBaseArn=()=>`${this.getBaseArn("secretsmanager")}:secret:${this.getSlug()}`,this.getSecretName=e=>`${this.getSlug()}/${e}`,this.getBaseArn=e=>`arn:aws:${e}:${this.getRegion()}:${this.getAccountId()}`,this.getResourceID=e=>e.replace(/[^A-Za-z0-9-]/gi,"-"),this.id=e,this.stage=t,this.stack=s}}t.StackConfig=s,t.Stage=class{constructor(e,t){this.getId=()=>this.id,this.getSlug=()=>this.getProperty("slug"),this.getStageName=()=>this.stage.name,this.getProperty=e=>this.stage?.[e],this.getStack=e=>{const t=this.stage.stacks?.[e];if(!t)throw new Error(`Invalid stack ${e}`);return new s(e,this,t)},this.id=e,this.stage=t}}},528:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EcrRepositoryStack=void 0;const r=s(0),i=s(830);class c extends r.Stack{constructor(e,t,s,c,a){super(e,t,s);const o=`${c.getSlug().toLowerCase()}/${a.toLowerCase()}`,n=new i.Repository(this,c.getResourceID(`${a}ECRRepository`),{repositoryName:o});n.addLifecycleRule({description:"Expire images older than 14 days",maxImageAge:r.Duration.days(14),rulePriority:1,tagStatus:i.TagStatus.UNTAGGED}),n.addLifecycleRule({description:"Expire dev images older than 14 days",maxImageAge:r.Duration.days(14),rulePriority:2,tagStatus:i.TagStatus.TAGGED,tagPrefixList:["dev-"]});const u=c.getStackExportId(`${a}ECRRepository`);new r.CfnOutput(this,`${u}Export`,{description:"ECR Repository name for Admin",exportName:u,value:n.repositoryArn})}}t.EcrRepositoryStack=c},278:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FargateService=void 0;const r=s(0),i=s(223),c=s(434),a=s(158),o=s(187),n=s(971),u=s(244);class l extends r.Stack{constructor(e,t,s,r,l,d,g,h,p,S,m){super(e,t,s);const y=m?.subDomainWithoutDot??"",b=m?.healthCheckPath??"/health-check",f={},w=S.secrets;if(w)for(const e in Object.keys(w)){const t=w[e],[s,r]=t.split(":").slice(0,2),c=a.Secret.fromSecretNameV2(this,e,s);f[e]=i.Secret.fromSecretsManager(c,r)}this.service=new c.ApplicationLoadBalancedFargateService(this,r.getResourceID("AdminService"),{cluster:l,certificate:d,redirectHTTP:!0,memoryLimitMiB:S?.memoryLimitMiB||512,cpu:S?.cpu||256,desiredCount:S?.desiredCount||1,taskImageOptions:{image:i.ContainerImage.fromEcrRepository(h,p),environment:S?.environment||{},secrets:f}});const v=this.service.taskDefinition;v.addToExecutionRolePolicy(new o.PolicyStatement({actions:["ecr:GetAuthorizationToken","ecr:BatchCheckLayerAvailability","ecr:GetDownloadUrlForLayer","ecr:BatchGetImage"],resources:[h.repositoryArn]})),v.addToExecutionRolePolicy(new o.PolicyStatement({actions:["secretsmanager:GetSecretValue"],resources:[`${r.getSecretBaseArn()}/*`]})),this.service.targetGroup.configureHealthCheck({path:b}),new n.ARecord(this,r.getResourceID("Recordset"),{recordName:`${y}${g.zoneName}`,zone:g,target:{aliasTarget:new u.LoadBalancerTarget(this.service.loadBalancer)}})}}t.FargateService=l},493:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GithubDeployStack=void 0;const r=s(0),i=s(187);class c extends r.Stack{constructor(e,t,s){super(e,t,s);const c=new i.User(this,"GithubDeployUser",{path:"/"}),a=new i.PolicyDocument({statements:[new i.PolicyStatement({effect:i.Effect.ALLOW,actions:["*"],resources:["*"]})]});c.attachInlinePolicy(new i.Policy(this,"GithubActionsAdministrator",{policyName:"GithubActionsAdministrator",document:a}));const o=new i.CfnAccessKey(this,"GithubActionsUserAccessKey",{userName:c.userName});new r.CfnOutput(this,"StackName",{description:"Stack name.",value:this.stackName}),new r.CfnOutput(this,"GithubUserAccessKeyID",{description:"Value of AWS_ACCESS_KEY_ID for github secrets",value:o.ref}),new r.CfnOutput(this,"GithubUserSecretAccessKey",{description:"Value of AWS_SECRET_ACCESS_KEY for github secrets",value:o.attrSecretAccessKey})}}t.GithubDeployStack=c},949:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loadJsonFile=void 0;const r=s(423),i=s(231);t.loadJsonFile=(e,t)=>{const s=r.resolve(e,t);if(!i.existsSync(s))throw new Error(`File does not exist: ${s}`);const c=i.readFileSync(s,"utf-8");return JSON.parse(c)}},719:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PostgresInstanceWithBastion=t.PostgresInstance=void 0;const r=s(0),i=s(38),c=s(158),a=s(918),o=s(971);class n extends r.Stack{constructor(e,t,s,r,o,n){super(e,t,s);const u=n?.version||a.PostgresEngineVersion.VER_15_2,l=new c.Secret(this,r.getResourceID("RdsCredentials"),{secretName:r.getSecretName("RdsCredentials"),generateSecretString:{secretStringTemplate:JSON.stringify({username:"master"}),excludePunctuation:!0,passwordLength:30,includeSpace:!1,generateStringKey:"password"}}),d=new i.SecurityGroup(this,r.getResourceID("DatabaseSecurityGroup"),{vpc:o});d.addIngressRule(i.Peer.ipv4(o.vpcCidrBlock),i.Port.tcp(5432));const g=`${r.getFullResourceId("RdsInstance")}`;this.rdsInstance=new a.DatabaseInstance(this,g,{engine:a.DatabaseInstanceEngine.postgres({version:u}),instanceType:i.InstanceType.of(i.InstanceClass.T3,i.InstanceSize.MICRO),vpc:o,databaseName:"website",instanceIdentifier:g,maxAllocatedStorage:200,securityGroups:[d],credentials:a.Credentials.fromSecret(l)})}}t.PostgresInstance=n,t.PostgresInstanceWithBastion=class extends n{constructor(e,t,s,r,c,a,n){super(e,t,s,r,c);const u=new i.SecurityGroup(this,r.getResourceID("BastionSecurityGroup"),{vpc:c});u.addIngressRule(i.Peer.anyIpv4(),i.Port.tcp(22));const l=new i.CfnKeyPair(this,r.getResourceID("BastionKeyPair"),{keyName:r.getFullResourceId("BastionKeyPair"),keyType:"ed25519"}),d=new i.Instance(this,r.getResourceID("BastionHost"),{vpc:c,securityGroup:u,instanceType:i.InstanceType.of(i.InstanceClass.T2,i.InstanceSize.NANO),machineImage:i.MachineImage.latestAmazonLinux2(),vpcSubnets:{subnetType:i.SubnetType.PUBLIC},keyName:l.keyName});d.connections.allowFromAnyIpv4(i.Port.tcp(22),"SSH access from the internet"),this.rdsInstance.connections.allowFrom(d,i.Port.tcp(5432));const g=new i.CfnEIP(this,r.getResourceID("BastionEIP"));new i.CfnEIPAssociation(this,r.getResourceID("BastionEipAssociation"),{eip:g.ref,instanceId:d.instanceId});const h=n?.bastionSubdomain??"ssh.";new o.ARecord(this,r.getResourceID("BastionRecordSet"),{recordName:`${h}${a.zoneName}`,zone:a,target:o.RecordTarget.fromIpAddresses(g.attrPublicIp)})}}},970:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.S3Bucket=void 0;const r=s(0),i=s(530),c=s(187);class a extends r.Stack{constructor(e,t,s,a,o){super(e,t,s);const n=o?.bucketName,u=o?.publicPath||"/*",l=o?.bucketAccess||"Private";this.bucket=new i.Bucket(this,a.getResourceID("Bucket"),{removalPolicy:r.RemovalPolicy.DESTROY,publicReadAccess:!1,bucketName:n,blockPublicAccess:{blockPublicAcls:!1,blockPublicPolicy:!1,ignorePublicAcls:!1,restrictPublicBuckets:!1}}),"Public"==l&&this.bucket.addToResourcePolicy(new c.PolicyStatement({actions:["s3:GetObject"],principals:[new c.AnyPrincipal],resources:[this.bucket.arnForObjects(u)]}))}}t.S3Bucket=a},138:function(e,t,s){var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s);var i=Object.getOwnPropertyDescriptor(t,s);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,r,i)}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),i=this&&this.__exportStar||function(e,t){for(var s in e)"default"===s||Object.prototype.hasOwnProperty.call(t,s)||r(t,e,s)};Object.defineProperty(t,"__esModule",{value:!0}),i(s(570),t),i(s(892),t),i(s(528),t),i(s(278),t),i(s(493),t),i(s(949),t),i(s(719),t),i(s(970),t)},0:e=>{e.exports=require("aws-cdk-lib")},677:e=>{e.exports=require("aws-cdk-lib/aws-certificatemanager")},38:e=>{e.exports=require("aws-cdk-lib/aws-ec2")},830:e=>{e.exports=require("aws-cdk-lib/aws-ecr")},223:e=>{e.exports=require("aws-cdk-lib/aws-ecs")},434:e=>{e.exports=require("aws-cdk-lib/aws-ecs-patterns")},187:e=>{e.exports=require("aws-cdk-lib/aws-iam")},918:e=>{e.exports=require("aws-cdk-lib/aws-rds")},971:e=>{e.exports=require("aws-cdk-lib/aws-route53")},244:e=>{e.exports=require("aws-cdk-lib/aws-route53-targets")},530:e=>{e.exports=require("aws-cdk-lib/aws-s3")},158:e=>{e.exports=require("aws-cdk-lib/aws-secretsmanager")},231:e=>{e.exports=require("fs")},423:e=>{e.exports=require("path")}},t={},s=function s(r){var i=t[r];if(void 0!==i)return i.exports;var c=t[r]={exports:{}};return e[r].call(c.exports,c,c.exports,s),c.exports}(138),r=exports;for(var i in s)r[i]=s[i];s.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();